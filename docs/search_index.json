[
["transforming-data.html", "12 transforming data 12.1 from data on the web to data in R 12.2 babynames 12.3 exercises", " 12 transforming data Once you have your data, you will almost invariably need to transform it - to sort it, select observations or variables from it, create new variables, partition it into groups, or to summarize it. In R, there is a general purpose tool (ok, package) that exists for this called dplyr (“d-plier”). Play with the various dplyr functions. Experiment. You will not break the internet Fig 12.1 - non digital pliers Dplyr is part of the core of the tidyverse and hence will be loaded automatically when you load the tidyverse libraries. library(tidyverse) The versatility of dplyr is demonstrated in Chapter 5 of R4DS, which shows how to do many basic, and some not so basic, operations on your data. Read it closely if you haven’t already done so. 12.1 from data on the web to data in R We’ve explored a simple dataset consisting of 10,000 songs (observations) and 35 measures (variables including artist). The first step here (and for your class project and the data science challenge) will be to get the data into R. How do you this? Method 1: Download the file to your computer as a csv file. I usually prefer this because (a) later, it will allow the code to run even if the website changes or disappears, (b) in the likely event that I will run the code several times, it is faster to get data from my own machine than from the cloud, and (c) if there are any anomalies in the data I can look at them locally (e.g., in Notepad++). Make sure that you know where your data is on your computer. The easiest way to do this is to work with an R project. Within R studio, create a new R project (or use an existing one). Move the csv file into this directory, so that data, code, and results will all be in the same place. Method 2: If, for some reason, you can’t load the data on to your own machine before running R, you can import the data from the cloud directly into R. You can do this either by specifying the musicURL separately (Method 2a) or call it directly within the read_csv statement. Here, too, I would encourage you to set up and work within a project. library(tidyverse) ### Method 1 # music1 &lt;- read_csv(&quot;music.csv&quot;) ### Method 2a musicURL &lt;- &quot;https://think.cs.vt.edu/corgis/csv/music/music.csv?forcedownload=1&quot; music1 &lt;- read_csv(musicURL) ### Method 2b # music1 &lt;- read_csv( # &quot;https://think.cs.vt.edu/corgis/csv/music/music.csv?forcedownload=1&quot; # ) Once the data are in R, experiment with it. Here’s what we did in class. music1 %&gt;% # filter(str_detect(location, &quot;FL&quot;)) # | # str_detect (location,&quot;Estonia&quot;)) %&gt;% # arrange(location) %&gt;% mutate(isFLA = ifelse(str_detect(location, &quot;FL&quot;), 1, 0)) %&gt;% mutate(FLHOT = (isFLA * artist.hotttnesss)) %&gt;% arrange(desc(FLHOT)) %&gt;% select(artist.name) %&gt;% # These three lines are new. distinct() %&gt;% # Why are they here? head(10) # What do they do? ## # A tibble: 10 x 1 ## artist.name ## &lt;chr&gt; ## 1 Yellowcard ## 2 Backstreet Boys ## 3 Tom Petty ## 4 Tom Petty And The Heartbreakers ## 5 Less Than Jake ## 6 New Found Glory ## 7 Plies ## 8 Plies featuring Tank ## 9 Evergreen Terrace ## 10 Sister Hazel In class, we used str_detect (string detect) to filter (select) all of the observations which included the string “FL” somewhere in the location variable. Then, we used two separate mutate statements to create new variables. In the code above, I’ve added three additional lines. Do you understand each step of what we did here and why? Can you do something more interesting with these data? 12.2 babynames We also explored the babynames library in R. You’ll need to install this on your computer if you haven’t already done so to. Play with it, and try grouping the data in different ways. # install.packages(&quot;babynames&quot;) library(babynames) str(babynames) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 1924665 obs. of 5 variables: ## $ year: num 1880 1880 1880 1880 1880 1880 1880 1880 1880 1880 ... ## $ sex : chr &quot;F&quot; &quot;F&quot; &quot;F&quot; &quot;F&quot; ... ## $ name: chr &quot;Mary&quot; &quot;Anna&quot; &quot;Emma&quot; &quot;Elizabeth&quot; ... ## $ n : int 7065 2604 2003 1939 1746 1578 1472 1414 1320 1288 ... ## $ prop: num 0.0724 0.0267 0.0205 0.0199 0.0179 ... 12.3 exercises make progress on your class project and (if applicable) your data science challenge. Be prepared to submit a brief summary of where you are when we come back from break. work with the babynames data, using the tools of dplyr. What names are most androgynous (are equally popular among males and females in a given year)? Contribute to a discussion about how to do this on Slack, building on the work of your classmates. "]
]

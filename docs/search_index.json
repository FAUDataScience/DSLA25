[
["transforming-data.html", "12 transforming data 12.1 from data on the web to data in R 12.2 babynames 12.3 exercises", " 12 transforming data Once you have your data, you will almost invariably need to transform it - to sort it, to select observations or variables from it, to create new variables, to partition it into groups, or to summarize it. In R, there is a general purpose tool (ok, package) that exists for this called dplyr (“d-plier”). Play with the various dplyr functions. Experiment. You will not break the internet Fig 12.1 - pliers to play with Dplyr is a core part of the tidyverse and hence is loaded automatically when you load the tidyverse ensemble of libraries: library(tidyverse) ## -- Attaching packages ------------------------------------- tidyverse 1.3.0 -- ## v ggplot2 3.2.1 v purrr 0.3.3 ## v tibble 2.1.3 v dplyr 0.8.3 ## v tidyr 1.0.0 v stringr 1.4.0 ## v readr 1.3.1 v forcats 0.4.0 ## -- Conflicts ---------------------------------------- tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() The versatility of dplyr is demonstrated in Chapter 5 of R4DS, which shows how to do many basic, and some not so basic, operations on your data. Read it closely if you haven’t already done so. 12.1 from data on the web to data in R Let’s consider a dataset consisting of 10,000 songs (observations) and 35 measures (variables including artist). The first step here (and for your class project and the data science challenge) will be to get the data into R. How do you this? Method 1: Download the file to your computer as a csv file. Some advantages of this include (a) it will allow the code to run even if the website changes or disappears, (b) in the likely event that I will run the code several times, it is faster to get data from my own machine than from the cloud, and (c) if there are any anomalies in the data I can look at them locally (e.g., in Notepad++). If you use this approach, make sure that you know where your data is on your computer. The easiest way to do this is to work with an R project. Within R studio, create a new R project (or use an existing one). Move the csv file into this directory, so that data, code, and results will all be in the same place. Method 2: Import the data from the cloud directly into R. You can do this either by specifying the musicURL separately (Method 2a) or call it directly within the read_csv statement (2b). Here, too, I would encourage you to set up and work within a project. library(tidyverse) ### Method 1 # music1 &lt;- read_csv(&quot;music.csv&quot;) ### Method 2a musicURL &lt;- &quot;https://think.cs.vt.edu/corgis/datasets/csv/music/music.csv?forcedownload=1&quot; music1 &lt;- read_csv(musicURL) ### Method 2b # music1 &lt;- read_csv( # &quot;https://think.cs.vt.edu/corgis/csv/music/music.csv?forcedownload=1&quot; # ) What can you do with the data in its existing form? What questions do you wish you could ask about these songs, artists, and the places they come from? When I first ran this code in 2018, the variables included states and countries. The current dataset doesn’t have these, but it does have longitude and latitude. Once the data are in R, experiment with it. Here’s what we did in class. This code worked in 2019, but in 2020 the music data is coded only in terms of latitude and longitude. To get state data from this, reverse geocoding is needed. A Google search turned up the following. Note that it requires two additional packages library(maps) ## ## Attaching package: &#39;maps&#39; ## The following object is masked from &#39;package:purrr&#39;: ## ## map library(maptools) ## Loading required package: sp ## Checking rgeos availability: FALSE ## Note: when rgeos is not available, polygon geometry computations in maptools depend on gpclib, ## which has a restricted licence. It is disabled by default; ## to enable gpclib, type gpclibPermit() # source is https://github.com/abresler # The single argument to this function, pointsDF, is a data.frame in which: # - column 1 contains the longitude in degrees (negative in the US) # - column 2 contains the latitude in degrees latlong2state &lt;- function(pointsDF) { # Prepare SpatialPolygons object with one SpatialPolygon # per state (plus DC, minus HI &amp; AK) states &lt;- map(&#39;state&#39;, fill=TRUE, col=&quot;transparent&quot;, plot=FALSE) IDs &lt;- sapply(strsplit(states$names, &quot;:&quot;), function(x) x[1]) states_sp &lt;- map2SpatialPolygons(states, IDs=IDs, proj4string=CRS(&quot;+proj=longlat +datum=WGS84&quot;)) # Convert pointsDF to a SpatialPoints object pointsSP &lt;- SpatialPoints(pointsDF, proj4string=CRS(&quot;+proj=longlat +datum=WGS84&quot;)) # Use &#39;over&#39; to get _indices_ of the Polygons object containing each point indices &lt;- over(pointsSP, states_sp) # Return the state names of the Polygons object containing each point stateNames &lt;- sapply(states_sp@polygons, function(x) x@ID) stateNames[indices] } latlong &lt;- music1 %&gt;% select (artist.longitude, artist.latitude) USartists &lt;- music1 %&gt;% mutate(state = latlong2state(latlong)) %&gt;% drop_na(state) So - now you have a list of songs and artists and some measures of “hotttness.” Can you use things like filter, arrange, and select to do something interesting with these data? 12.2 babynames We also explored the babynames library in R. You’ll need to install this on your computer if you haven’t already done so to. Play with it, and now that you have mastered dplyr, use mutate to create some new measures that tell an interesting story about these data. library(babynames) str(babynames) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 1924665 obs. of 5 variables: ## $ year: num 1880 1880 1880 1880 1880 1880 1880 1880 1880 1880 ... ## $ sex : chr &quot;F&quot; &quot;F&quot; &quot;F&quot; &quot;F&quot; ... ## $ name: chr &quot;Mary&quot; &quot;Anna&quot; &quot;Emma&quot; &quot;Elizabeth&quot; ... ## $ n : int 7065 2604 2003 1939 1746 1578 1472 1414 1320 1288 ... ## $ prop: num 0.0724 0.0267 0.0205 0.0199 0.0179 ... 12.3 exercises make progress on your class project. You will be presenting this two weeks from today. Work with the babynames data, using the tools of dplyr. What names are most androgynous (are equally popular among males and females in a given year)? Contribute to a discussion about how to do this on Slack, building on the work of your classmates. "]
]
